"Turn on syntax highlighting.
syntax on

set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set expandtab       " tabs are spaces

set number          " show line numbers
set showcmd         " show command in bottom bar
set showmode        " show VIM mode
set cursorline      " highlight current line

set showmatch       " highlight matching [{()}]
set incsearch       " search as characters are entered
set hlsearch        " highlight matches
" turn off search highlight by help of prressing
nnoremap <space> :nohlsearch<CR>

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level
" space open/closes folds
nnoremap <leader>z za

" move vertically by visual line
nnoremap j gj
nnoremap k gk

set wildmenu        " visual autocomplete for command menu
filetype indent on      " load filetype-specific indent files

" Encoding
set encoding=utf-8

" Speed up scrolling in Vim
set ttyfast

" Status bar
set laststatus=2

" Display different types of white spaces.
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

set mouse=a " Enable mouse usage (all modes)

" set colorcolumn=120

set backspace=indent,eol,start " To allow backspacing over everything in insert mode 

filetype plugin on      " load filetype-specific indent files
" Resources:
" * https://dougblack.io/words/a-good-vimrc.html
" * https://www.linode.com/docs/tools-reference/tools/introduction-to-vim-customization/

set belloff=all
" ================ jump to the last position when reopening a file ==================
if has("autocmd")
          au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" ================ Persistent Undo ==================
if has('persistent_undo')
    " define a path to store persistent undo files.
    let target_path = expand('~/.config/vim-persisted-undo/')
    " create the directory and any parent directories
    " if the location does not exist.
    if !isdirectory(target_path)
        call system('mkdir -p ' . target_path)
    endif
    " point Vim to the defined undo directory.
    let &undodir = target_path
    " finally, enable undo persistence.
    set undofile
endif

" ================ Scrolling ========================

set scrolloff=4         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" ================ Plugins ======================

call plug#begin()

Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --go-completer --rust-completer' }
" Plug 'morhetz/gruvbox'
Plug 'sainnhe/everforest'
Plug 'kamykn/spelunker.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Yggdroot/indentLine'
Plug 'tpope/vim-fugitive'
Plug 'preservim/nerdtree'
Plug 'vim-syntastic/syntastic'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'rust-lang/rust.vim'
Plug 'hashivim/vim-terraform'
Plug 'jeetsukumaran/vim-markology'
" TODO: Plug 'wfxr/minimap.vim', {'do': ':!cargo install --locked code-minimap'}
Plug 'nathanaelkane/vim-indent-guides'
Plug 'tpope/vim-sleuth'
 
" TODO : Plug 'neoclide/coc.nvim', {'branch': 'release'}
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
 
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Initialize plugin system
call plug#end()

" morhetz/gruvbox
" let g:gruvbox_guisp_fallback = "bg"
" silent! colorscheme gruvbox
" Important!!
if has('termguicolors')
  set termguicolors
endif
" For dark version.
set background=dark
" Set contrast.
" This configuration option should be placed before `colorscheme everforest`.
" Available values: 'hard', 'medium'(default), 'soft'
let g:everforest_background = 'soft'
" For better performance
let g:everforest_better_performance = 1
let g:everforest_spell_foreground = 'colored'
let g:airline_theme = 'everforest'
colorscheme everforest

" vim-airline/vim-airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" ycm-core/YouCompleteMe
" let g:ycm_python_binary_path = 'python3'
" map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" vim-syntastic/syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_yaml_checkers = ['yamllint']
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_ruby_checkers   = ['rubocop']

let g:terraform_fold_sections=1
let g:terraform_fmt_on_save=1

" preservim/nerdtree
" autocmd VimEnter * NERDTree
" Go to previous (last accessed) window.
autocmd VimEnter * wincmd p
" Open a NERDTree automatically when vim starts up if no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ctrlpvim/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" you can find your desire language code from here :
" https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
let g:vim_linguist_destination_language="fa"

" add yaml stuffs
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Hidden easter egg ;)
" Display relative and absolute line numbers simultaneously in Vim
" https://www.vim.org/scripts/script.php?script_id=2351
" call RltvNmbr#RltvNmbrCtrl(1)
"
au BufReadPost *.libsonnet set syntax=Yaml

let g:minimap_width = 10
" let g:minimap_auto_start = 1
" let g:minimap_auto_start_win_enter = 1

let g:indent_guides_enable_on_vim_startup = 1
" ================ Customize mapping ======================

let mapleader = "\<Space>"

" Toggle paste mode mode with <Leader>pp
nnoremap <Leader>pp :set paste!<CR>

" Indent whole file while preserving cursor location with <Leader>=
nnoremap <Leader>= m'gg=G`'

" Add a semicolon to the current line without moving the cursor with <Leader>;
nnoremap <Leader>; m'A;<ESC>`'

" Source vimrc with <Leader>vc
nnoremap <Leader>vc :source ~/.vim/vimrc<CR>:echo "Reloaded .vimrc"<CR>

" Clear trailing whitespace with <Leader>cw
nnoremap <Leader>cw :%s/\s\+$//g<CR>:nohlsearch<CR>

" Nerdtree mappings. nt = toggle, nf = find.
nnoremap <Leader>nt :NERDTreeToggle<CR>
nnoremap <Leader>nf :NERDTreeFind<CR>

" Select All and Copy to system's clipboard (requires vim-gtk package on Ubuntu-Gnome)
nnoremap <leader>sa <esc>mzgg0vG$"+y'z<CR>

" Python runner
map <F5> :terminal python3 %<cr>
map <leader><F5> :q<cr>

" turn all tabs to spaces
map <leader>tt :retab


" lets learn vim better :P 
"
" disable arrow keys to force usage of hjkl
" inoremap  <Up>     <NOP>
" inoremap  <Down>   <NOP>
" inoremap  <Left>   <NOP>
" inoremap  <Right>  <NOP>
" noremap   <Up>     <NOP>
" noremap   <Down>   <NOP>
" noremap   <Left>   <NOP>
" noremap   <Right>  <NOP>

" Show a popup widnow related to the latest git commit that changed the desired line
map <silent><Leader>g :call setbufvar(winbufnr(popup_atcursor(systemlist("cd " . shellescape(fnamemodify(resolve(expand('%:p')), ":h")) . " && git log --no-merges -n 1 -L " . shellescape(line("v") . "," . line(".") . ":" . resolve(expand("%:p")))), { "padding": [1,1,1,1], "pos": "botleft", "wrap": 0 })), "&filetype", "git")<CR>

map <silent><Leader>t :% s,0.14.11,0.15.4,g <CR>
" Automatically use the system clipboard for copy and paste.
" set clipboard=unnamedplus

" set spelllang=en
" set spell
set nospell

inoremap { {}<Esc>ha
inoremap ( ()<Esc>ha
inoremap [ []<Esc>ha
inoremap " ""<Esc>ha
inoremap ' ''<Esc>ha
inoremap ` ``<Esc>ha 
